[
  {
    "category": "social media",
    "engines": [
      "9gag",
      "deviantart",
      "flickr",
      "imgur",
      "lemmy comments",
      "lemmy communities",
      "lemmy posts",
      "lemmy users",
      "mastodon hashtags",
      "mastodon users",
      "reddit",
      "tootfinder"
    ],
    "discussion_on_spread_content": "- Platform Architecture: Centralized (Reddit, 9gag, DeviantArt, Flickr, Imgur) vs Federated/Decentralized (Lemmy, Mastodon).\n- Content Focus: General Discussion/Link Sharing (Reddit, Lemmy Posts), Microblogging (Mastodon), Visual Content (Flickr - photography, DeviantArt - art/illustration, Imgur/9gag - memes/humor), Specific Object Types within federated platforms (comments, communities, users, hashtags).\n- Discovery Mechanisms: Centralized rely on algorithms/subreddits/profiles. Federated rely heavily on hashtags (Mastodon), community pages (Lemmy), or specific search tools.",
    "discussion_on_spread_logistics": "- Federated architecture impacts discovery, community structure, user experience. Instance configuration often needed for Lemmy/Mastodon engines. Language varies by community/instance.",
    "discussion_on_weighting_content": "1. Platform Intent: Mainstream Reddit vs. Federated Lemmy/Mastodon is primary driver.\n2. Federated Search Granularity: Need for posts vs comments vs communities vs users vs hashtags dictates specific engine choice within Lemmy/Mastodon.\n3. Visual Content Type: Flickr (photo) vs DeviantArt (art) vs Imgur/9gag (memes) drives selection for visual queries.",
    "discussion_on_weighting_logistics": "1. Reliability (Federated/External): External indexers like Tootfinder might be less reliable/comprehensive than direct instance API searches (e.g., Mastodon hashtags).",
    "discussion_on_differentiation_content": "- Reddit vs. Federated (Lemmy/Mastodon): Use Reddit for mainstream/broad discussions (High). Use Lemmy/Mastodon for decentralized alternatives, specific communities, or privacy (High).\n- Lemmy Content Types: Use lemmy posts (topic discovery), lemmy comments (specific replies), lemmy communities (find groups), lemmy users (find people) (High importance for each).\n- Mastodon Content Types: Use mastodon hashtags (primary topic discovery) (High). Use mastodon users (find people) (High). Use tootfinder for potential text search (Medium importance, reliability varies).\n- Visual Platforms: Use Flickr (photography, CC licenses) (High). Use DeviantArt (broad art, fan art) (High). Use Imgur (memes, GIFs, Reddit-linked images) (High). Use 9gag (specific humor/meme style) (High).",
    "discussion_on_differentiation_logistics": "- Federated engines require instance configuration and understanding the model. Search is often hashtag-based, not full-text like centralized platforms.",
    "other_notes_content": "- Federated search capabilities (esp. Mastodon full-text) differ significantly from centralized platforms.",
    "other_notes_logistics": "- Federated engines (Lemmy *, Mastodon *, Tootfinder) depend heavily on configured instance scope and reliability. Tootfinder often unstable."
  },
  {
    "category": "files",
    "engines": [
      "1337x",
      "annas archive",
      "apk mirror",
      "bt4g",
      "btdigg",
      "fdroid",
      "library genesis",
      "nyaa",
      "openrepos",
      "piratebay",
      "solidtorrents",
      "tokyotoshokan",
      "wikicommons.files",
      "z-library"
    ],
    "discussion_on_spread_content": "- File Type Focus: BitTorrent metadata, Shadow Library documents (books/papers), Android Apps (APKs), Sailfish OS Apps (RPMs), General Freely Licensed Files.\n- Torrent Sub-Types: General Indexes (1337x, piratebay), Niche Indexes (nyaa, tokyotoshokan - East Asian Media), DHT Search (bt4g, btdigg), Meta-Search (solidtorrents).\n- App Store Types: FOSS (F-Droid), General/Specific Versions (APKMirror), Sailfish OS (OpenRepos).",
    "discussion_on_spread_logistics": "- Mechanism Differences: Torrent index vs DHT search vs Meta-search. Shadow library meta-search vs direct access. App store curation vs direct APK download. Direct file hosting (Commons).\n- Legality/Source Model: Ranges from official/verified/free sources (F-Droid, OpenRepos, APKMirror, Commons) to legally grey/infringing (torrents, shadow libraries). Geographic/language constraints on some torrent content.",
    "discussion_on_weighting_content": "1. File Type: Torrent, book/paper, Android app, Sailfish app, or free licensed file? (Primary driver).\n2. Torrent Content: General vs Anime/East Asian?\n3. Book/Paper Source: Meta-search convenience vs direct library search?\n4. Android App Philosophy: FOSS vs general/specific version?\n5. License Need: Explicit free/open license required?",
    "discussion_on_weighting_logistics": "1. Operating System: Android vs Sailfish OS for apps?",
    "discussion_on_differentiation_content": "- Torrents (General): Use 1337x or piratebay (Medium scope focus).\n- Torrents (Anime/East Asian): Use nyaa or tokyotoshokan (High content focus).\n- Torrents (DHT Search): Use bt4g or btdigg (High mechanism differentiator).\n- Torrents (Meta-Search): Use solidtorrents (Medium convenience/mechanism).\n- Books/Papers: Use annas archive (meta-search convenience - Medium). Use library genesis (academic focus - Medium) or z-library (general e-book focus - Medium) directly if needed.\n- Android Apps (FOSS): Use fdroid *only* (High content focus).\n- Android Apps (General/Versions): Use apk mirror (High function differentiator).\n- Sailfish OS Apps: Use openrepos *only* (High ecosystem differentiator).\n- Freely Licensed General Files: Use wikicommons.files *only* (High license focus).",
    "discussion_on_differentiation_logistics": "- Legality/Risk: Torrents and shadow libraries operate in a legally grey area and carry risks.\n- Technical Needs: APKMirror requires understanding sideloading. OpenRepos is specific to Sailfish OS.",
    "other_notes_content": "- Use of torrent/shadow library engines carries legal/ethical risks depending on content/jurisdiction.",
    "other_notes_logistics": "- Torrent/Shadow Library engines require updated, reliable mirror URLs configured. App stores are OS-specific."
  },
  {
    "category": "science",
    "engines": [
      "arxiv",
      "crossref",
      "google scholar",
      "openairedatasets",
      "openairepublications",
      "pdbe",
      "pubmed",
      "semantic scholar",
      "wikispecies",
      "wolframalpha"
    ],
    "discussion_on_spread_content": "- Primary Content Type: Literature (PubMed, Google Scholar, Semantic Scholar), Preprints (arXiv), Datasets (OpenAIRE Datasets), 3D Structures (PDBe), Taxonomy (Wikispecies), Metadata/DOIs (CrossRef), Computed Answers/Data (WolframAlpha).\n- Discipline Focus: Broad (Google Scholar, Semantic Scholar, WolframAlpha), Biomedical (PubMed), Physics/Math/CS (arXiv), Structural Biology (PDBe), Taxonomy (Wikispecies), EU/OA Focus (OpenAIRE).",
    "discussion_on_spread_logistics": "- Search Paradigm: Keyword/Metadata search (Google Scholar, PubMed, arXiv, OpenAIRE), AI-enhanced semantic search (Semantic Scholar), Structured data query (CrossRef, PDBe, Wikispecies), Natural language computation (WolframAlpha).",
    "discussion_on_weighting_content": "1. Information Needed: Paper vs Preprint vs Dataset vs Structure vs Taxonomy vs Metadata vs Computed Fact? (Primary driver).\n2. Field Specificity: General science vs Biomed vs Physics/Math/CS vs Structural Bio vs Taxonomy?\n3. Peer Review Status: Peer-reviewed vs Preprint?",
    "discussion_on_weighting_logistics": "1. Search Features: Broadest coverage vs AI insights vs Authoritative indexing vs Latest preprints vs Guaranteed metadata vs Structure visualization vs Computation?",
    "discussion_on_differentiation_content": "- Finding Research Papers (General): Use Google Scholar (broadest - High) or Semantic Scholar (AI features - High).\n- Finding Research Papers (Biomedical): Use PubMed (authoritative, MeSH - High).\n- Finding Preprints (Physics, Math, CS, etc.): Use arXiv (latest pre-review - High).\n- Finding Datasets or EU/Open Access Work: Use OpenAIRE Datasets/Publications (High content type/Medium scope focus).\n- Finding/Verifying Publication Metadata: Use CrossRef (DOI lookup - High function).\n- Finding 3D Molecular Structures: Use PDBe exclusively (High content type).\n- Finding Biological Classification: Use Wikispecies specifically (High function).\n- Calculating Answers / Accessing Curated Data: Use WolframAlpha *exclusively* (High function - computation).",
    "discussion_on_differentiation_logistics": "- Using Engines Together: Common workflow combines broad search with specific lookups (CrossRef, PDBe, WolframAlpha).",
    "other_notes_content": "- WolframAlpha computes, doesn't retrieve papers. arXiv is non-peer-reviewed. PubMed/PDBe/CrossRef/OpenAIRE are authoritative databases. Google/Semantic are broad indexers. Full-text access often external.",
    "other_notes_logistics": "- API keys often beneficial for PubMed, CrossRef, Semantic Scholar, WolframAlpha, OpenAIRE."
  },
  {
    "category": "it",
    "engines": [
      "alpine linux packages",
      "anaconda",
      "arch linux wiki",
      "askubuntu",
      "bitbucket",
      "caddy.community",
      "codeberg",
      "cppreference",
      "crates.io",
      "discuss.python",
      "docker hub",
      "free software directory",
      "gentoo wiki",
      "github",
      "gitea.com",
      "gitlab",
      "hackernews",
      "hex",
      "hoogle",
      "huggingface",
      "huggingface datasets",
      "huggingface spaces",
      "lib.rs",
      "lobste.rs",
      "mankier",
      "mdn",
      "media.ccc.de",
      "metacpan",
      "microsoft learn",
      "nixos wiki",
      "npm",
      "ollama",
      "packagist",
      "pi-hole.community",
      "pkg.go.dev",
      "pypi",
      "rubygems",
      "searchcode code",
      "sourcehut",
      "stackoverflow",
      "superuser",
      "voidlinux"
    ],
    "discussion_on_spread_content": "- Primary Function: Q&A, Code Hosting/Search, Package Management/Registries, Documentation/Wikis, Tech Discussion/News, AI/ML Platform, Specialized Directories/Resources, Conference Media.\n- Ecosystem Specificity: High specialization by programming language, Linux distribution, specific tools, platforms, or development philosophy.\n- Information Type: Direct answers, source code, package metadata, formal docs, command refs, discussions, AI models/data/demos, lists, videos.",
    "discussion_on_spread_logistics": "- Ecosystem/platform specificity implies logistical constraints on where information can be found.",
    "discussion_on_weighting_content": "1. User's Task: Debugging, finding library, API ref, finding project, reading news, finding AI models, etc. (Primary driver).\n2. Technology/Ecosystem: Python, Rust, JS, C++, Go, Arch, Ubuntu, Docker, Caddy, MS Azure, Web standards, AI/ML, etc.?\n3. Information Granularity: Snippet, full project, package info, formal docs, opinion, model details?",
    "discussion_on_weighting_logistics": "- None explicitly separated, but task/ecosystem matching is the core weighting logistic.",
    "discussion_on_differentiation_content": "- Q&A: Stack Overflow (code - High) vs Ask Ubuntu (Ubuntu - High) vs Super User (general IT - High).\n- Code Hosting: GitHub (default/largest - High) vs GitLab/Bitbucket/Codeberg/Gitea/SourceHut (platform specific features/philosophy - High/Medium). searchcode code (snippets across platforms - High function).\n- Packages: Use engine specific to ecosystem (e.g., PyPI for Python, npm for JS, crates.io for Rust) (High ecosystem lock-in).\n- Docker Images: Use Docker Hub (High function).\n- Docs: Use engine specific to tech (MDN for Web, cppreference for C++, distro wikis, MS Learn, Mankier for man pages, Ollama docs, Hoogle for Haskell types) (High ecosystem/function lock-in).\n- Tech News/Discussion: Hacker News vs Lobste.rs (community focus - High). Specific forums (tool/language focus - High).\n- AI/ML: Hugging Face models vs datasets vs spaces (High function differentiation).\n- FOSS: FSF Directory (FSF verified - High philosophy). Codeberg/SourceHut (FOSS hosting - High philosophy).\n- Talks: media.ccc.de (CCC events only - High source).",
    "discussion_on_differentiation_logistics": "- Chaining Engines: Common to use package manager -> code host -> Q&A site -> documentation.",
    "other_notes_content": "- User must know the resource type and ecosystem needed.",
    "other_notes_logistics": "- API keys useful for GitHub, GitLab, Stack Exchange. Package managers are ecosystem-specific. Distro wikis vary."
  },
  {
    "category": "music",
    "engines": [
      "bandcamp",
      "deezer",
      "genius",
      "invidious",
      "mixcloud",
      "piped",
      "piped.music",
      "qwant",
      "radio browser",
      "soundcloud",
      "wikicommons.audio"
    ],
    "discussion_on_spread_content": "- Content Type & Function: Commercial Streaming (Deezer), Indie Platform (Bandcamp, SoundCloud), Lyrics (Genius), Long-Form Audio/Mixes (Mixcloud, SoundCloud), Live Radio (Radio Browser), Free Licensed Audio (Commons), YT Frontend (Invidious, Piped), Aggregator (Qwant).\n- User Goal: Listening, discovery, purchase, lyrics, mixes, radio, reuse.",
    "discussion_on_spread_logistics": "- Source/Platform: Catalogs, uploads, annotations, streams, repository, proxied YT, aggregated.\n- Privacy Frontends (Invidious/Piped) provide access to YT content differently.",
    "discussion_on_weighting_content": "1. Primary Need: Lyrics vs Stream vs Indie vs Mix vs Radio vs Free Audio? (Primary driver).\n2. Discovery vs Known Item: New indie (Bandcamp/SoundCloud) vs specific mainstream (Deezer/YT Frontends) vs lyrics (Genius).\n3. Format/Action: Stream vs Purchase vs Text vs Download.",
    "discussion_on_weighting_logistics": "1. Privacy: YT Frontends favored for private YT access.",
    "discussion_on_differentiation_content": "- Mainstream Streaming: Deezer (commercial catalog - High). Piped/Invidious (private YT access - High function/privacy).\n- Indie Music: Bandcamp (discovery/purchase - High function/focus). SoundCloud (emerging artists/uploads - High function/focus).\n- Lyrics: Genius exclusively (High function).\n- Mixes/Podcasts: Mixcloud (long-form/mixes focus - High). SoundCloud (also strong - Medium).\n- Live Radio: Radio Browser (live streams - High function).\n- Free Licensed Audio: wikicommons.audio *only* (High license focus).\n- General Aggregation: Qwant (broader, less specific - Medium).",
    "discussion_on_differentiation_logistics": "- Complementary Use: Listen Deezer, check Genius, discover Bandcamp. Piped/Invidious need instance config. Licensing/purchase options differ.",
    "other_notes_content": "- Bandcamp=purchase, Genius=text, Radio Browser=live, Commons=licensed, Mixcloud=licensed mixes.",
    "other_notes_logistics": "- Piped/Invidious config needed."
  },
  {
    "category": "news",
    "engines": [
      "bing news",
      "brave.news",
      "duckduckgo news",
      "google news",
      "mojeek news",
      "presearch news",
      "qwant news",
      "reuters",
      "seekr news",
      "startpage news",
      "wikinews",
      "yahoo news",
      "yep news"
    ],
    "discussion_on_spread_content": "- Source Type: Broad Aggregators (Google, Bing, Yahoo), Privacy Frontends (DDG, Qwant, Startpage), Independent Index Aggregators (Brave, Mojeek, Yep), Agency Feed (Reuters), Citizen Journalism (Wikinews), Scored Aggregator (Seekr), Decentralized Aggregator (Presearch).\n- Implicit Bias/Focus: Mainstream/Western vs Independent vs Agency vs Citizen vs Scored vs Decentralized perspectives.",
    "discussion_on_spread_logistics": "- Index Source: Google vs Bing vs Independent vs Agency vs Collaborative vs Scored Logic vs Decentralized Network.\n- Functionality: Aggregation vs Direct Articles vs Scoring.",
    "discussion_on_weighting_content": "1. Comprehensiveness vs Specificity: Broad aggregate vs Agency vs Citizen?\n2. Index Preference: Google vs Bing vs Independent results?\n3. Value-Added Features: Scoring vs Decentralized model?",
    "discussion_on_weighting_logistics": "1. Privacy Needs: Major vs Frontends vs Independent/Decentralized?\n2. Timeliness/Scope: Majors broadest/fastest.",
    "discussion_on_differentiation_content": "- Broadest Aggregation: Google News or Bing News (or Yahoo News) (High index source).\n- Privacy + Broad Aggregation: Startpage News (Google backend), DuckDuckGo News (Bing backend), Qwant News (Bing + own) (High privacy/index source).\n- Privacy + Independent Results: Brave News, Mojeek News, Yep News (High index source).\n- Direct Agency Reporting: Reuters (High source type).\n- Citizen Journalism: Wikinews (High source model).\n- News with Scoring: Seekr News (High feature).\n- Decentralized News: Presearch News (Medium architecture).",
    "discussion_on_differentiation_logistics": "- Comparing Engines: Compare Google News vs Brave News for source diversity; Check Reuters for fact verification.",
    "other_notes_content": "- Seekr scoring proprietary. Wikinews coverage variable. Presearch model unique.",
    "other_notes_logistics": "- Independent indexes potentially smaller/slower."
  },
  {
    "category": "videos",
    "engines": [
      "bing videos",
      "bitchute",
      "brave.videos",
      "dailymotion",
      "duckduckgo videos",
      "google videos",
      "invidious",
      "media.ccc.de",
      "odysee",
      "peertube",
      "piped",
      "presearch videos",
      "qwant videos",
      "rumble",
      "seekr videos",
      "sepiasearch",
      "vimeo",
      "wikicommons.videos"
    ],
    "discussion_on_spread_content": "- Platform Type: Centralized (Vimeo, Dailymotion), Aggregators (Google, Bing, Privacy/Independent Variants), YT Frontends (Invidious, Piped), Decentralized/Federated (PeerTube, Odysee), Niche/Alternative (Rumble, BitChute), Archives (CCC, Commons).\n- Content Focus: General UGC/Pro, Creative, European, Alt-Speech, FOSS, Talks, Free Licensed.",
    "discussion_on_spread_logistics": "- Underlying Technology: Centralized, Aggregation, Proxying, Federation/P2P, Blockchain.",
    "discussion_on_weighting_content": "1. Target Platform/Content: YouTube vs Vimeo vs Alternative vs Talk vs Free footage? (Paramount).\n2. Niche Content Needs: Politics, FOSS, specific talks, free license?",
    "discussion_on_weighting_logistics": "1. Privacy (for YT): Direct access via aggregators vs Private via frontends?\n2. Breadth vs Depth: Aggregators vs Specific platforms?\n3. Decentralization/Federation Preference?",
    "discussion_on_differentiation_content": "- Broadest Search: Google Videos or Bing Videos (High index source). Privacy variants (DDG, Qwant) (High privacy/index). Independent variants (Brave, Presearch) (High index source/Medium architecture).\n- YouTube Content (Private): Invidious or Piped (High function/privacy).\n- High-Quality/Creative: Vimeo (High content focus).\n- Major YT Alt (Europe): Dailymotion (Medium content/geo focus).\n- Alternative/Free Speech: Rumble, BitChute, Odysee (High content/philosophy focus).\n- Federated/Decentralized (FOSS): SepiaSearch (for PeerTube network) (High function). PeerTube engine (for specific instance) (High platform specificity).\n- Specific Archives: media.ccc.de (CCC talks) (High source). wikicommons.videos (free licensed) (High license focus).\n- Video Search with Scoring: Seekr Videos (Medium feature).",
    "discussion_on_differentiation_logistics": "- Workflow: Search broad, then target specific platform/frontend. Instance config needed for Invidious/Piped/SepiaSearch.",
    "other_notes_content": "- Rumble/BitChute/Odysee often political/controversial. Commons/CCC unique archives.",
    "other_notes_logistics": "- Instance config needed for Invidious/Piped/SepiaSearch."
  },
  {
    "category": "images",
    "engines": [
      "artic",
      "bing images",
      "brave.images",
      "deviantart",
      "duckduckgo images",
      "findthatmeme",
      "flickr",
      "frinkiac",
      "google images",
      "imgur",
      "ipernity",
      "library of congress",
      "material icons",
      "mojeek images",
      "openverse",
      "presearch images",
      "public domain image archive",
      "qwant images",
      "seekr images",
      "startpage images",
      "svgrepo",
      "tineye",
      "unsplash",
      "wallhaven",
      "wikicommons.images",
      "yacy images",
      "yep images"
    ],
    "discussion_on_spread_content": "- Type: General Web Search, Stock Photo, Art/Museum/Archive, Icons/Vectors, Wallpapers, Open License/PD, Special Function, Scored Search.\n- License Focus: Free/Open vs General Web vs Platform Terms vs Museum Terms.",
    "discussion_on_spread_logistics": "- Index Source: Google vs Bing vs Independent vs Decentralized vs Curated vs UGC vs Specialized.\n- Search Function: Keyword vs Reverse vs Specific Lookup.",
    "discussion_on_weighting_content": "1. Image Type: Photo vs Art vs Icon vs Meme vs Wallpaper vs Historical?\n2. License Requirement: Any vs Free-to-use vs PD vs CC?\n3. Source Preference: Web vs Stock vs Art Community vs Museum?",
    "discussion_on_weighting_logistics": "1. Search Function: Keyword vs Reverse vs Meme lookup?",
    "discussion_on_differentiation_content": "- General Search: Google/Bing (High index). DDG/Qwant/Startpage (High privacy+G/B). Brave/Mojeek/Yep/Presearch/YaCy (High index+privacy/Medium architecture).\n- Free Photos: Unsplash (High license/content). Flickr (High content, Medium license).\n- Art/Communities: DeviantArt (High content). Flickr (High photo focus). Ipernity (Medium platform focus).\n- Museums/Archives: Artic / Library of Congress (High source).\n- Icons/Vectors: Material Icons (High design system). SVGRepo (High format).\n- Wallpapers: Wallhaven (High content specificity).\n- Free License/PD: Openverse / wikicommons.images / public domain image archive (High license focus).\n- Specific Lookups: FindThatMeme / Frinkiac (High function).\n- Viral/Hosting: Imgur (High content focus).\n- Scored Search: Seekr Images (Medium feature).",
    "discussion_on_differentiation_logistics": "- Reverse Search: TinEye exclusively (High function). Workflow: Search broad -> TinEye -> Openverse/Commons.",
    "other_notes_content": "- Licensing critical. Special functions unique.",
    "other_notes_logistics": "- Reverse search requires image input."
  },
  {
    "category": "general",
    "engines": [
      "ask",
      "bing",
      "brave",
      "cloudflareai",
      "curlie",
      "currency",
      "ddg definitions",
      "duckduckgo",
      "dictzone",
      "encyclosearch",
      "google",
      "libretranslate",
      "lingva",
      "mojeek",
      "mwmbl",
      "mymemory translated",
      "presearch",
      "qwant",
      "searchmysite",
      "startpage",
      "stract",
      "wiby",
      "wikidata",
      "wikipedia",
      "wolframalpha",
      "yacy",
      "yahoo",
      "yep"
    ],
    "discussion_on_spread_content": "- Function: Broad Web Search, Niche Web Search, Encyclopedia/Knowledge Base, Computational Knowledge, Utilities (Definition, Currency, Dictionary, Translation), Directory, AI Interface, Configured Backend.\n- Specificity: Broadest (Google/Bing) to hyper-specific utilities (Currency, DDG Definitions).",
    "discussion_on_spread_logistics": "- Index Source / Model: Google vs Bing vs Independent vs Decentralized vs Curated KB vs Utility Backend vs Human Curated vs AI Model.",
    "discussion_on_weighting_content": "1. User Goal: Web lookup vs Fact vs Definition vs Translation vs Calculation vs Encyclopedia vs Niche web vs AI task?\n2. Result Format: Links vs Answer vs Data vs Computed vs Translated vs Definition vs Value?",
    "discussion_on_weighting_logistics": "1. Privacy/Index Preference for web search.",
    "discussion_on_differentiation_content": "- Broad Web: Google/Bing (High index). Yahoo/Ask (Medium quality/backend). DDG/Startpage/Qwant (High privacy+G/B). Brave/Mojeek/Yep/Stract (High index+privacy). Presearch/YaCy (Medium architecture).\n- Niche Web: Wiby/SearchMySite (High focus). Mwmbl (Medium focus/experimental).\n- Encyclopedia: Wikipedia (articles - High function). EncycloSearch (meta - High function).\n- Structured Data: Wikidata (machine-readable facts - High function/format).\n- Computation: WolframAlpha *exclusively* (High function).\n- Definitions: DDG Definitions (quick - High function). DictZone (detailed, esp. HU - High function, Medium language).\n- Translation: LibreTranslate (open-source - High tech/philosophy). Lingva (Google via proxy - High tech/model). MyMemory (human TM - High function).\n- Currency: Currency utility (High function).\n- Directory: Curlie (human curated - High function).\n- AI Tasks: CloudflareAI (generative AI - High function).",
    "discussion_on_differentiation_logistics": "- Workflow: Chain broad search -> Wikipedia -> Wikidata -> WolframAlpha. Utilities are single-task.",
    "other_notes_content": "- Utilities single-task. Knowledge engines provide specific info types.",
    "other_notes_logistics": "- Privacy major factor for web search. Configurable engines depend on admin."
  }
]
